/// <reference types="node" />
import { EventEmitter } from 'events';
import TelnetClient from 'telnet-client';
export declare interface DenonAVR {
    on(event: 'raw', listener: (data: Buffer) => void): this;
    on(event: 'connected', listener: () => void): this;
    on(event: 'disconnected', listener: () => void): this;
    on(event: 'powerOn', listener: () => void): this;
    on(event: 'powerStandby', listener: () => void): this;
    on(event: 'mainZoneOn', listener: () => void): this;
    on(event: 'mainZoneOff', listener: () => void): this;
}
export interface DenonConfig {
    host: string;
    port?: number;
}
/**
 * Create the controller class with the provided connection
 */
export declare class DenonAVR extends EventEmitter {
    constructor(config: DenonConfig);
    private config;
    connection: TelnetClient;
    /**
     * Connect to the AVR via the defined transport
     */
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    /**
     * Send a command when we expect a single response
     *
     * @param   string    command   Command to be sent, eg MV?
     * @param   string    prefix    What the expected response will be prefixed with, eg MV for main volume
     */
    send(cmd: string, prefix: string): Promise<void>;
    /**
     * Parse a event received from the AVR not from sending a command
     *
     * @param   buffer    data
     */
    parseData(data: Buffer): void;
    /**
     * Parse the response when sending a command
     *
     * @param   string        data      Data returned from the transport
     * @param   string|RegExp prefix    What the expected response will be prefixed with, eg MV for main volume
     */
    parseResponse(data: string[], prefix: string | RegExp): Promise<string>;
}
